{"version":3,"sources":["webpack:///./node_modules/angular-4-data-table-bootstrap-4/node_modules/@angular/core/@angular lazy namespace object","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/_guard/auth.guard.ts","webpack:///./src/app/_models/role.ts","webpack:///./src/app/_models/user.ts","webpack:///./src/app/_services/auth.service.ts","webpack:///./src/app/_services/exam.service.ts","webpack:///./src/app/_services/question.service.ts","webpack:///./src/app/_services/user.service.ts","webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/appfooter/appfooter.component.css","webpack:///./src/app/appfooter/appfooter.component.html","webpack:///./src/app/appfooter/appfooter.component.ts","webpack:///./src/app/appheader/appheader.component.css","webpack:///./src/app/appheader/appheader.component.html","webpack:///./src/app/appheader/appheader.component.ts","webpack:///./src/app/appmenu/appmenu.component.css","webpack:///./src/app/appmenu/appmenu.component.html","webpack:///./src/app/appmenu/appmenu.component.ts","webpack:///./src/app/change-user-password/change-user-password.component.css","webpack:///./src/app/change-user-password/change-user-password.component.html","webpack:///./src/app/change-user-password/change-user-password.component.ts","webpack:///./src/app/change-user-password/password.validator.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/edituser/edituser.component.css","webpack:///./src/app/edituser/edituser.component.html","webpack:///./src/app/edituser/edituser.component.ts","webpack:///./src/app/exam/exam.component.css","webpack:///./src/app/exam/exam.component.html","webpack:///./src/app/exam/exam.component.ts","webpack:///./src/app/examassign/examassign.component.css","webpack:///./src/app/examassign/examassign.component.html","webpack:///./src/app/examassign/examassign.component.ts","webpack:///./src/app/forgotpassword/forgotpassword.component.css","webpack:///./src/app/forgotpassword/forgotpassword.component.html","webpack:///./src/app/forgotpassword/forgotpassword.component.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/question/add-questions/add-questions.component.css","webpack:///./src/app/question/add-questions/add-questions.component.html","webpack:///./src/app/question/add-questions/add-questions.component.ts","webpack:///./src/app/question/question.component.css","webpack:///./src/app/question/question.component.html","webpack:///./src/app/question/question.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/resetpassword/password.validator.ts","webpack:///./src/app/resetpassword/resetpassword.component.css","webpack:///./src/app/resetpassword/resetpassword.component.html","webpack:///./src/app/resetpassword/resetpassword.component.ts","webpack:///./src/app/usereditprofile/usereditprofile.component.css","webpack:///./src/app/usereditprofile/usereditprofile.component.html","webpack:///./src/app/usereditprofile/usereditprofile.component.ts","webpack:///./src/app/userpage/userpage.component.css","webpack:///./src/app/userpage/userpage.component.html","webpack:///./src/app/userpage/userpage.component.ts","webpack:///./src/app/userprofile/userprofile.component.css","webpack:///./src/app/userprofile/userprofile.component.html","webpack:///./src/app/userprofile/userprofile.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./node_modules/angular-4-data-table-bootstrap-4/node_modules/@angular/core/@angular lazy recursive\";","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { User } from '../_models/user';\r\nimport { UserService } from '../_services/user.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class \r\nAuthGuard implements CanActivate {\r\n    user : User [] = [];\r\n    constructor(\r\n        private router: Router,\r\n        private userService: UserService\r\n    ) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot){\r\n        const currantUser = sessionStorage.getItem('user');\r\n        if(currantUser){\r\n            return true;\r\n        }else{\r\n            this.router.navigate([\"login\"]);\r\n            return false;\r\n        }\r\n       }\r\n\r\n}","export enum RoleName {\r\n  Admin = \"Admin\",\r\n\tUser = \"User\"\r\n}","import { RoleName } from './role';\r\n\r\nexport class User {\r\n    id: number;\r\n    password: string;\r\n    userName: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    role: RoleName;\r\n    dob: Date;\r\n    email: string;\r\n    gender: string;\r\n    resetToken : string;\r\n}","import { User } from '../_models/user';\r\nimport { Injectable } from '@angular/core';\r\nimport { RequestOptions, Http, Headers } from '@angular/http';\r\nimport { LoginRequest } from '../_payload/loginRequest';\r\nimport { JwtAuthenticationResponse } from '../_payload/jwtAuthenticationResponse';\r\nimport { SignupRequest } from '../_payload/signupRequest';\r\nimport { ForgotPasswordRequest } from '../_payload/forgotPasswordRequest';\r\nimport { ResetPasswordRequest } from '../_payload/resetPasswordRequest';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  private baseUrl = 'http://localhost:8080';\r\n  user: User;\r\n\r\n  headers = new Headers({ 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\r\n  options = new RequestOptions({ headers: this.headers });\r\n\r\n  constructor(private http: Http) { }\r\n\r\n  login(userData: LoginRequest): Promise<JwtAuthenticationResponse> {\r\n    return this.http.post(this.baseUrl + '/signin', userData)\r\n      .toPromise()\r\n      .then(response => response.json() as JwtAuthenticationResponse);\r\n  }\r\n\r\n  createUser(userData: SignupRequest) {\r\n    return this.http.post(this.baseUrl + '/signup', userData)\r\n      .toPromise().then(response => response)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  forgotpassword(useremail: ForgotPasswordRequest): Promise<any> {\r\n    return this.http.post(this.baseUrl + '/forgotpassword', useremail)\r\n      .toPromise()\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  resetpassword(data: ResetPasswordRequest): Promise<void> {\r\n    return this.http.post(this.baseUrl + '/reset', data)\r\n      .toPromise().then(response => response)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: any): Promise<any> {\r\n    console.error('Some error occured', error);\r\n    return Promise.reject(error.message || error);\r\n  }\r\n}","import { User } from '../_models/user';\r\nimport { Injectable } from '@angular/core';\r\nimport { RequestOptions, Http, Headers } from '@angular/http';\r\nimport { Exam } from '../_models/exam';\r\nimport { UserService } from './user.service';\r\nimport { ExamsAssign } from '../_models/examsassign';\r\n\r\n@Injectable()\r\nexport class ExamService {\r\n  private baseUrl = 'http://localhost:8080';\r\n  user: User;\r\n  exam: Exam;\r\n  selectedExam: Exam;\r\n\r\n  headers = new Headers({ 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\r\n  options = new RequestOptions({ headers: this.headers });\r\n\r\n  constructor(private http: Http,\r\n              private userService: UserService) { }\r\n \r\n   createExam(exam: Exam): Promise<Exam> {\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.userService.token\r\n      });\r\n    exam.createdBy = this.userService.user;\r\n    exam.createdDate = Date.now();\r\n    return this.http.post(this.baseUrl + '/exam', exam,{ headers: headers })\r\n      .toPromise().then(response => this.exam = response.json() as Exam)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  getExams(): Promise<Exam[]> {\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.userService.token\r\n    });\r\n    return this.http.get(this.baseUrl + '/exam/findAll',{ headers: headers })\r\n      .toPromise()\r\n      .then(response => response.json() as Exam[])\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  getExamById(id: number) {\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.userService.token\r\n    });\r\n    return this.http.get(this.baseUrl + '/exam/' + id,{ headers: headers })\r\n      .toPromise()\r\n      .then(response =>  response.json() as Exam)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  examAssign(examAssign: ExamsAssign): Promise<Exam> {\r\n    examAssign.assignBy = this.user;\r\n    examAssign.dateOfAssign = Date.now();\r\n    return this.http.post(this.baseUrl + '/examAssign', examAssign)\r\n      .toPromise().then(response => response.json() as User)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  //Store Selected exam for questions\r\n  addExam(exam: Exam){\r\n    return this.selectedExam = exam;\r\n  }\r\n\r\n  private handleError(error: any): Promise<any> {\r\n    console.error('Some error occured', error);\r\n    return Promise.reject(error.message || error);\r\n  }\r\n}","import { User } from '../_models/user';\r\nimport { Injectable } from '@angular/core';\r\nimport { RequestOptions, Http, Headers } from '@angular/http';\r\nimport { Exam } from '../_models/exam';\r\nimport { UserService } from './user.service';\r\nimport { ExamsAssign } from '../_models/examsassign';\r\nimport { ExamService } from './exam.service';\r\nimport { Question } from '../_models/question';\r\n\r\n@Injectable()\r\nexport class QuestionService {\r\n  private baseUrl = 'http://localhost:8080';\r\n  user: User;\r\n  exam: Exam;\r\n\r\n  headers = new Headers({ 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\r\n  options = new RequestOptions({ headers: this.headers });\r\n\r\n  constructor(private http: Http,\r\n              private examService: ExamService,\r\n              private userService: UserService) { }\r\n \r\n   createQuestion(question: Question): Promise<Question> {\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.userService.token\r\n      });\r\n    question.exam = this.examService.selectedExam;\r\n    return this.http.post(this.baseUrl + '/question', question ,{ headers: headers })\r\n      .toPromise().then(response => response.json() as Question)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: any): Promise<any> {\r\n    console.error('Some error occured', error);\r\n    return Promise.reject(error.message || error);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Headers, Http, RequestOptions } from \"@angular/http\";\r\nimport { User } from '../_models/user';\r\nimport { RoleName } from '../_models/role';\r\nimport { Exam } from '../_models/exam';\r\nimport { ExamsAssign } from '../_models/examsassign';\r\nimport { LoginRequest } from '../_payload/loginRequest';\r\nimport { ForgotPasswordRequest } from '../_payload/forgotPasswordRequest';\r\nimport { ResetPasswordRequest } from '../_payload/resetPasswordRequest';\r\nimport { SignupRequest } from '../_payload/signupRequest';\r\nimport { UpdateUserPasswordRequest } from '../_payload/updateUserPasswordRequest';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  private baseUrl = 'http://localhost:8080';\r\n  user: User;\r\n  token: String;\r\n  headers = new Headers({'Content-Type': 'application/json'});\r\n  options = new RequestOptions({ headers: this.headers });\r\n\r\n  constructor(private http: Http) {\r\n    this.user = JSON.parse(sessionStorage.getItem('user'));\r\n    this.token = JSON.parse(sessionStorage.getItem('token'));\r\n   }\r\n\r\n  getUserById(id: number): Promise<User>{\r\n    const headers = new Headers({\r\n      'Authorization': 'Bearer ' + this.token\r\n    });\r\n    return this.http.get(this.baseUrl + '/user/' + id,{ headers: headers })\r\n      .toPromise()\r\n      .then(response => response.json() as User);\r\n  }\r\n\r\n  getUserbyToken(token : String): Promise<User> {\r\n    this.token = token;\r\n    sessionStorage.setItem('token', JSON.stringify(token));\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + token\r\n    });\r\n    return this.http.get(this.baseUrl + '/user/find/',{ headers: headers })\r\n      .toPromise()\r\n      .then(response => this.user = response.json() as User);\r\n  }\r\n\r\n  getusers(): Promise<User[]> {\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.token\r\n    });\r\n    return this.http.get(this.baseUrl + '/user/findAll',{ headers: headers })\r\n      .toPromise()\r\n      .then(response => response.json() as User[]);\r\n  }\r\n\r\n  getOnlyUsers(): Promise<User[]> {\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.token\r\n    });\r\n    return this.http.get(this.baseUrl + '/user/getOnlyUsres',{ headers: headers })\r\n      .toPromise()\r\n      .then(response => response.json() as User[]);\r\n  }\r\n\r\n  updateUser(userData: User) {\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.token\r\n    });\r\n    if (userData.role ===  RoleName.Admin) {\r\n      userData.role = RoleName.Admin;\r\n    } else {\r\n      userData.role = RoleName.User;\r\n    }\r\n    return this.http.put(this.baseUrl + '/user',userData,{ headers: headers })\r\n      .toPromise()\r\n      .then(response => response)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  updateProfile(userData: User): Promise<User> {\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.token\r\n    });\r\n    if (userData.role ===  RoleName.Admin) {\r\n      userData.role = RoleName.Admin;\r\n    } else {\r\n      userData.role = RoleName.User;\r\n    }\r\n    return this.http.put(this.baseUrl + '/user/editProfile',userData,{ headers: headers })\r\n      .toPromise()\r\n      .then(response => this.user = response.json() as User)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  changePassword(data: UpdateUserPasswordRequest){\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.token\r\n    });\r\n    return this.http.post(this.baseUrl + '/user/changepassword', data,{ headers: headers })\r\n      .toPromise().then(response => response)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  deleteUser(user: User) {\r\n    const headers = new Headers({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + this.token\r\n    });\r\n    return this.http.delete(this.baseUrl + '/user/' + user.id,{ headers: headers })\r\n      .toPromise()\r\n      .then(response => response)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: any): Promise<any> {\r\n    console.error('Some error occured', error);\r\n    return Promise.reject(error.message || error);\r\n  }\r\n}","module.exports = \"<div style=\\\"margin: auto; max-width: 1000px; margin-bottom: 50px;\\\">\\n  \\n\\n    <data-table \\n      headerTitle=\\\"Angular 4 CRUD Example With Bootstrap 4 Datatable\\\"\\n      [items]=\\\"items\\\"\\n      [itemCount]=\\\"itemCount\\\"\\n      (reload)=\\\"reloadItems($event)\\\"\\n  \\n      (rowClick)=\\\"rowClick($event)\\\"\\n      (rowDoubleClick)=\\\"rowDoubleClick($event)\\\"\\n      [rowTooltip]=\\\"rowTooltip\\\"\\n      >\\n      <data-table-column\\n          [property]=\\\"'name'\\\"\\n          [header]=\\\"'Name'\\\"\\n          [sortable]=\\\"true\\\"\\n          [resizable]=\\\"true\\\"\\n          >\\n      </data-table-column>\\n      <data-table-column\\n          [property]=\\\"'jobTitle'\\\"\\n          [header]=\\\"'Job title'\\\"\\n          [sortable]=\\\"true\\\"\\n          >        \\n      </data-table-column>\\n      <data-table-column\\n        [property]=\\\"'Actions'\\\"\\n        [header]=\\\"'Actions'\\\">\\n        <template #dataTableCell let-item=\\\"item\\\">\\n              <span style=\\\"color: rgb(232, 0, 0)\\\">\\n              <a href=\\\"javascript:void(0);\\\" (click)=\\\"getData(item)\\\" data-toggle=\\\"modal\\\" data-target=\\\"#add-edit-Modal\\\">Edit</a>\\n              </span>\\n              <span style=\\\"color: rgb(232, 0, 0)\\\">\\n              <a href=\\\"javascript:void(0);\\\" (click)=\\\"delData(item)\\\">Delete</a>\\n              </span>\\n        </template>\\n      </data-table-column>\\n    </data-table>\\n  </div>\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { User } from '../_models/user';\nimport { UserService } from '../_services/user.service';\nimport { Router } from '@angular/router';\nimport { Observable,Subject } from \"rxjs\";  \nimport { DataTableResource } from 'angular-4-data-table-bootstrap-4';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({ templateUrl: 'admin.component.html' })\nexport class AdminComponent implements OnInit {\n    title = 'Angular 4 CRUD Example Using Bootstrap Datatable';\n    userForm: FormGroup;\n    @ViewChild('modalClose') modalClose:ElementRef;\n    //Static data, you can change as per your need\n    users: any[] = [];\n          \n      itemResource;\n      items = [];\n      itemCount = 0;\n      params = {offset: 0, limit: 10}; //Static can be changed as per your need\n      formFlag = 'add';\n  \n      constructor(private router: Router,\n          private userService: UserService){\n               this.userService.getOnlyUsers().then(users => {\n              this.users = users;\n          });\n        this.itemResource = new DataTableResource(this.users);\n        this.itemResource.count().then(count => this.itemCount = count);\n        this.reloadItems(this.params);\n      }  \n  \n      reloadItems(params) {\n        this.itemResource.query(params).then(items => this.items = items);\n      }\n  \n      //Init method\n      ngOnInit(){\n          this.userForm = new FormGroup({\n            'id': new FormControl(null),\n            'firstName': new FormControl(null, Validators.required),\n            'lastName': new FormControl(null, Validators.required),\n            'userName': new FormControl(null, Validators.required),\n          });\n      }\n  \n      initUser(){\n          //User form reset\n          this.userForm.reset();\n          this.formFlag = 'add';\n      }\n\n      //Delete user's data\n      delData(user: User){\n          this.userService.deleteUser(user)\n              .then(data => { \n                  console.log(data);\n                  \n                  });\n          this.reloadTableManually();\n      }\n      \n      edit(user: User) {\n          this.router.navigate(['/user/edit', user.id]);\n      }\n\n      //Reload table manually after add/edit\n      reloadTableManually(){\n          this.reloadItems(this.params);\n          this.itemResource.count().then(count => this.itemCount = count);\n      }\n}","import { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AuthGuard } from './_guard/auth.guard';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AdminComponent } from './admin/admin.component';\n\nimport { ResetpasswordComponent } from './resetpassword/resetpassword.component';\nimport { ForgotpasswordComponent } from './forgotpassword/forgotpassword.component';\nimport { UserprofileComponent } from './userprofile/userprofile.component';\nimport { EdituserComponent } from './edituser/edituser.component';\nimport { UserpageComponent } from './userpage/userpage.component';\nimport { ExamComponent } from './exam/exam.component';\nimport { ExamassignComponent } from './examassign/examassign.component';\nimport { ChangeUserPasswordComponent } from './change-user-password/change-user-password.component';\nimport { QuestionComponent } from './question/question.component';\nimport { RoleName } from './_models/role';\nimport { UsereditprofileComponent } from './usereditprofile/usereditprofile.component';\nimport { AppmenuComponent } from './appmenu/appmenu.component';\nimport { AddQuestionsComponent } from './question/add-questions/add-questions.component';\n\nconst appRoutes: Routes = [\n    { path: 'login', component: LoginComponent},\n    { path: 'register', component: RegisterComponent },\n    { path: 'forgot', component: ForgotpasswordComponent },\n    { path: 'reset', component: ResetpasswordComponent},\n    { path: '', component: HomeComponent, canActivate: [AuthGuard] ,\n    children: [\n        { path: 'userPage', component: UserpageComponent,canActivate: [AuthGuard] },\n        { path: 'admin', component: AdminComponent,canActivate: [AuthGuard] },\n        { path: 'profile', component: UserprofileComponent, canActivate: [AuthGuard] },\n        { path: 'editprofile', component: UsereditprofileComponent,canActivate: [AuthGuard] },\n        { path: 'user/register', component: RegisterComponent,canActivate: [AuthGuard]},\n        { path: 'cngpass', component: ChangeUserPasswordComponent, canActivate: [AuthGuard] },\n        { path: 'exam', component: ExamComponent, canActivate:[AuthGuard] },\n        { path: 'examassign', component: ExamassignComponent, canActivate:[AuthGuard] },\n        { path: 'question', component: QuestionComponent, canActivate:[AuthGuard] },\n        { path: 'question/add', component: AddQuestionsComponent, canActivate:[AuthGuard] },\n        { path: 'user/edit/:id', component: EdituserComponent, canActivate:[AuthGuard]},\n        { path: 'menu', component: AppmenuComponent, canActivate:[AuthGuard]},\n        // otherwise redirect to home\n        { path: '**', redirectTo: '' }\n      ]\n    },\n    { path: '**', redirectTo: '' }\n];\n\nexport const routing = RouterModule.forRoot(appRoutes,{\n    onSameUrlNavigation: 'reload'\n  });","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!-- nav -->\\n<!-- <nav class=\\\"navbar navbar-expand navbar-dark bg-dark\\\" *ngIf=\\\"currentUser\\\">\\n    <div class=\\\"navbar-nav\\\">\\n        <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/\\\">Home</a>\\n        <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/admin\\\" *ngIf=\\\"isAdmin\\\">Admin</a>\\n        <a class=\\\"nav-item nav-link\\\" (click)=\\\"logout()\\\">Logout</a>\\n    </div>\\n</nav>\\n<div>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6 offset-md-3\\\">\\n               <router-outlet></router-outlet> \\n            </div>\\n        </div>\\n    </div>\\n</div> -->\\n \\n<!-- <app-appheader></app-appheader>\\n<app-appmenu></app-appmenu>\\n\\n<app-dashboard></app-dashboard>\\n<app-appfooter></app-appfooter>  -->\\n<router-outlet></router-outlet> \"","import { Component } from '@angular/core';\nimport { User } from './_models/user';\nimport { Router } from '@angular/router';\nimport { UserService } from './_services/user.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  currentUser: User = new User();\n  role = '';\n  user : User;\n    constructor(\n        private router: Router,\n        private userService : UserService\n    ) {\n     this.currentUser.userName = sessionStorage.getItem('loggedUser');\n     this.role = sessionStorage.getItem('loggedUserRole');\n    }\n\n  //  ngOnInit() {\n  //        this.user = this.userService.user;\n  //  }\n\n   get isUser() {\n    return this.user = this.userService.user;\n  }\n\n    logout() {          \n      sessionStorage.removeItem(\"loggedUser\");\n      this.userService.user = null;\n      this.router.navigate(['/login']);\n    }\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { routing } from './app-routing.module';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HomeComponent } from './home/home.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { HttpModule } from '@angular/http';\nimport { UserService } from './_services/user.service';\nimport { AppheaderComponent } from './appheader/appheader.component';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { AppmenuComponent } from './appmenu/appmenu.component';\nimport { AppfooterComponent } from './appfooter/appfooter.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { ResetpasswordComponent } from './resetpassword/resetpassword.component';\nimport { ForgotpasswordComponent } from './forgotpassword/forgotpassword.component';\nimport { UserprofileComponent } from './userprofile/userprofile.component';\nimport { EdituserComponent } from './edituser/edituser.component';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { UserpageComponent } from './userpage/userpage.component';\nimport { ExamComponent } from './exam/exam.component';\nimport { ExamassignComponent } from './examassign/examassign.component';\nimport { AuthService } from './_services/auth.service';\nimport { ExamService } from './_services/exam.service';\nimport { QuestionComponent } from './question/question.component';\nimport { ChangeUserPasswordComponent } from './change-user-password/change-user-password.component';\nimport { QuestionService } from './_services/question.service';\nimport { UsereditprofileComponent } from './usereditprofile/usereditprofile.component';\nimport { AddQuestionsComponent } from './question/add-questions/add-questions.component';\nimport { RouterModule } from '@angular/router';\nimport { DataTableModule } from 'angular-4-data-table-bootstrap-4';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent,\n    RegisterComponent,\n    AdminComponent,\n    AppheaderComponent,\n    AppmenuComponent,\n    AppfooterComponent,\n    DashboardComponent,\n    ResetpasswordComponent,\n    ForgotpasswordComponent,\n    UserprofileComponent,\n    EdituserComponent,\n    UserpageComponent,\n    ExamComponent,\n    ExamassignComponent,\n    QuestionComponent,\n    ChangeUserPasswordComponent,\n    UsereditprofileComponent,\n    AddQuestionsComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    HttpModule,\n    HttpClientModule,\n    routing,\n    MatRadioModule,\n    FormsModule,\n    DataTableModule\n  ],\n  exports: [RouterModule],\n  providers: [\n    AuthService,\n    UserService,\n    ExamService,\n    QuestionService,\n    { provide: APP_BASE_HREF, useValue: '/' }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGZvb3Rlci9hcHBmb290ZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<footer class=\\\"main-footer\\\">\\n  <strong>Copyright &copy; 2014-2019 <a href=\\\"http://adminlte.io\\\">AdminLTE.io</a>.</strong>\\n  All rights reserved.\\n  <div class=\\\"float-right d-none d-sm-inline-block\\\">\\n    <b>Version</b> 3.0.0-rc.3\\n  </div>\\n</footer>\\n\\n<!-- Control Sidebar -->\\n<aside class=\\\"control-sidebar control-sidebar-dark\\\">\\n  <!-- Control sidebar content goes here -->\\n</aside>\\n<!-- /.control-sidebar -->\\n\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-appfooter',\n  templateUrl: './appfooter.component.html',\n  styleUrls: ['./appfooter.component.css']\n})\nexport class AppfooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcGhlYWRlci9hcHBoZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \" <!-- Navbar -->\\n <nav class=\\\"main-header navbar navbar-expand navbar-white navbar-light\\\">\\n  <!-- Left navbar links -->\\n  <ul class=\\\"navbar-nav\\\">\\n    <li class=\\\"nav-item\\\">\\n      <a class=\\\"nav-link\\\" data-widget=\\\"pushmenu\\\" href=\\\"#\\\"><i class=\\\"fas fa-bars\\\"></i></a>\\n    </li>\\n    <li class=\\\"nav-item d-none d-sm-inline-block\\\" *ngIf=\\\"isAdmin\\\">\\n      <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/admin\\\">Home</a>\\n    </li>\\n    <li class=\\\"nav-item d-none d-sm-inline-block\\\" *ngIf=\\\"isAdmin\\\">\\n      <a [routerLink]=\\\"['/user/register']\\\" class=\\\"nav-item nav-link\\\">Add User</a>\\n    </li>\\n    <li class=\\\"nav-item d-none d-sm-inline-block\\\" *ngIf=\\\"isUser\\\">\\n      <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/userPage\\\">Home</a>\\n    </li>\\n    \\n  </ul>\\n\\n   <!-- Right navbar links -->\\n   <ul class=\\\"navbar-nav ml-auto\\\">\\n    \\n    <li class=\\\"nav-item\\\">\\n      <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/login\\\" (click)=\\\"logout()\\\">Logout</a>\\n    </li>\\n  </ul>\\n</nav>\\n<!-- /.navbar -->\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../_services/user.service';\nimport { User } from '../_models/user';\nimport { RoleName } from '../_models/role';\n\n@Component({\n  selector: 'app-appheader',\n  templateUrl: './appheader.component.html',\n  styleUrls: ['./appheader.component.css']\n})\nexport class AppheaderComponent implements OnInit {\n\n  constructor(private router: Router,\n    private userService: UserService) { }\n\n  ngOnInit() {\n  }\n\n  get isAdmin() {\n    return this.userService.user && this.userService.user.role === RoleName.Admin;\n  }\n\n  get isUser() {\n    return this.userService.user && this.userService.user.role === RoleName.User;\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"user\");\n    this.userService.user = null;\n    this.router.navigate(['/login']);\n  }\n\n}\n","module.exports = \".sidebar{\\r\\n    overflow-y : unset !important;\\r\\n}\\r\\n.pnx-msg-icon{\\r\\n    width: 238px !important;\\r\\n    height: 50px !important;\\r\\n}\\r\\n.mat-cell {\\r\\n    color: white;\\r\\n}\\r\\n.mat-header-cell{\\r\\n    color: white;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwbWVudS9hcHBtZW51LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSw2QkFBNkI7QUFDakM7QUFDQTtJQUNJLHVCQUF1QjtJQUN2Qix1QkFBdUI7QUFDM0I7QUFDQTtJQUNJLFlBQVk7QUFDaEI7QUFDQTtJQUNJLFlBQVk7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9hcHBtZW51L2FwcG1lbnUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaWRlYmFye1xyXG4gICAgb3ZlcmZsb3cteSA6IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbn1cclxuLnBueC1tc2ctaWNvbntcclxuICAgIHdpZHRoOiAyMzhweCAhaW1wb3J0YW50O1xyXG4gICAgaGVpZ2h0OiA1MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuLm1hdC1jZWxsIHtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxufVxyXG4ubWF0LWhlYWRlci1jZWxse1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59Il19 */\"","module.exports = \"<!-- Main Sidebar Container -->\\n<aside class=\\\"main-sidebar sidebar-dark-primary elevation-4\\\">\\n  <!-- Brand Logo -->\\n  <a href=\\\"http://www.nxsol.com/\\\" class=\\\"brand-link\\\">\\n    <img src=\\\"assets/dist/img/NX.png\\\" alt=\\\"AdminLTE Logo\\\" class=\\\"brand-image img-circle elevation-3\\\" style=\\\"opacity: .8\\\">\\n    <span class=\\\"brand-text font-weight-light\\\">N-Xperts Solutions</span>\\n  </a>\\n\\n  <!-- Sidebar -->\\n  <div class=\\\"sidebar\\\">\\n    <!-- Sidebar user panel (optional) -->\\n    <div class=\\\"user-panel mt-3 pb-3 mb-3 d-flex\\\">\\n      <div class=\\\"image\\\">\\n        <img src=\\\"assets/dist/img/user2-160x160.jpg\\\" class=\\\"img-circle elevation-2\\\" alt=\\\"User Image\\\">\\n      </div>\\n      <div class=\\\"info\\\">\\n        <a [routerLink]=\\\"['/profile']\\\" class=\\\"d-block\\\">{{firstName}} {{lastName}}</a>\\n      </div>\\n    </div>\\n\\n    <!-- Sidebar Menu -->\\n    <nav class=\\\"mt-2\\\">\\n      <ul class=\\\"nav nav-pills nav-sidebar flex-column\\\" data-widget=\\\"treeview\\\" role=\\\"menu\\\" data-accordion=\\\"false\\\">\\n        <!-- Add icons to the links using the .nav-icon class\\n               with font-awesome or any other icon font library -->\\n        <li class=\\\"nav-item\\\">\\n          <a [routerLink]=\\\"['/cngpass']\\\" class=\\\"nav-link\\\">\\n            <i class=\\\"nav-icon fas fa-edit\\\"></i>\\n            <p>\\n              Change Password\\n            </p>\\n          </a>\\n        </li>\\n        <li class=\\\"nav-header\\\">Exam Portal</li>\\n        <li class=\\\"nav-item\\\">\\n          <a [routerLink]=\\\"['/exam']\\\" class=\\\"nav-link\\\">\\n            <i class=\\\"far fa-circle nav-icon\\\"></i>\\n            <p>\\n              Exam\\n            </p>\\n          </a>\\n        </li>\\n        <li class=\\\"nav-item\\\">\\n          <a [routerLink]=\\\"['/question']\\\" class=\\\"nav-link\\\">\\n            <i class=\\\"far fa-circle nav-icon\\\"></i>\\n            <p>\\n              Quetions\\n            </p>\\n          </a>\\n        </li>\\n      </ul>\\n    </nav>\\n    <!-- /.sidebar-menu -->\\n  </div>\\n  <!-- /.sidebar -->\\n</aside>\"","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { User } from '../_models/user';\nimport { UserService } from '../_services/user.service';\nimport { RoleName } from '../_models/role';\nimport { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { RouterEvent, NavigationEnd, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-appmenu',\n  templateUrl: './appmenu.component.html',\n  styleUrls: ['./appmenu.component.css']\n})\nexport class AppmenuComponent implements OnInit {\n  user: User;\n  token: String;\n  dtTrigger: Subject<any> = new Subject();\n  firstName: String;\n  lastName: String;\n\n  constructor(private userService: UserService,\n    private router: Router) {\n    this.ngOnInit();\n  }\n\n  ngOnInit() {\n    this.token = this.userService.token;\n    this.router.events.pipe(\n      filter((event: RouterEvent) => event instanceof NavigationEnd)\n    ).subscribe(() => {\n\n      this.userService.getUserbyToken(this.token)\n        .then(data => {\n          this.user = data;\n          this.firstName = data.firstName;\n          this.lastName = data.lastName;\n        });\n\n    });\n  }\n\n  get isAdmin() {\n    return this.user && this.user.role === RoleName.Admin;\n  }\n\n  get isUser() {\n    return this.user && this.user.role === RoleName.User;\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NoYW5nZS11c2VyLXBhc3N3b3JkL2NoYW5nZS11c2VyLXBhc3N3b3JkLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<form [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <div class=\\\"form-group\\\">\\n      <label for=\\\"newpassword\\\">Password</label>\\n      <input type=\\\"text\\\" formControlName=\\\"newpassword\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.newpassword.errors }\\\" />\\n      <div *ngIf=\\\"submitted && f.newpassword.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.newpassword.errors.required\\\">newpassword is required</div>\\n      </div>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label>Confirm Password</label>\\n    <input type=\\\"text\\\" formControlName=\\\"confirmPwd\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.confirmPwd.errors }\\\" />\\n      <div *ngIf=\\\"submitted && f.confirmPwd.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.confirmPwd.errors.required\\\">confirmPwd is required</div>\\n      </div>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n      <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n  </div>\\n  <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../_services/auth.service';\nimport { PassWordValidator } from './password.validator';\nimport { UserService } from '../_services/user.service';\nimport { RoleName } from '../_models/role';\n\n\n@Component({\n  selector: 'app-change-user-password',\n  templateUrl: './change-user-password.component.html',\n  styleUrls: ['./change-user-password.component.css']\n})\nexport class ChangeUserPasswordComponent implements OnInit {\n  resetForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n  error = '';\n  user: any;\n\n  constructor(private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private userService: UserService) {\n\n  }\n\n  ngOnInit() {\n    this.resetForm = this.formBuilder.group({\n      newpassword: ['', Validators.required],\n      confirmPwd: ['', Validators.required]\n    }, {\n        validator: PassWordValidator.matchPwds\n      });\n\n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.resetForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.resetForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.userService.changePassword(this.resetForm.value).then(\n      data => {\n        if (data != null) {\n          if (this.userService.user.role === RoleName.Admin) {\n            //set data in session \n            // sessionStorage.setItem('loggedUser', data.userName);\n            // sessionStorage.setItem('loggedUserRole', data.role.name);\n            this.router.navigate(['/admin']);\n          } else {\n            // sessionStorage.setItem('loggedUser', data.userName);\n            // sessionStorage.setItem('loggedUserRole', data.role.name);\n            this.router.navigate(['/userPage']);\n          }\n        }\n      },\n      error => {\n        this.loading = false;\n      });\n  }\n\n\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\nexport class PassWordValidator {\r\n  \r\n  static matchPwds(control: AbstractControl) {\r\n    let newPwd2 = control.get('newpassword');\r\n    let confirmPwd2 = control.get('confirmPwd');\r\n    if(newPwd2.value !== confirmPwd2.value){\r\n      return { pwdsDontMatch: true };\r\n    }\r\n    return null;\r\n  }\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<!-- Content Wrapper. Contains page content -->\\n<div class=\\\"content-wrapper\\\">\\n  <!-- Content Header (Page header) -->\\n  <div class=\\\"content-header\\\">\\n    <div class=\\\"container-fluid\\\">\\n      <!-- <div class=\\\"row mb-2\\\">\\n        <div class=\\\"col-sm-12\\\"> -->\\n          <!-- <ol class=\\\"breadcrumb float-sm-right\\\">\\n            <li class=\\\"breadcrumb-item\\\"><a href=\\\"#\\\">Home</a></li>\\n            <li class=\\\"breadcrumb-item active\\\">LoginPage</li>\\n          </ol> -->\\n        <!-- </div> /.col -->\\n      <!-- </div>/.row -->\\n    </div><!-- /.container-fluid -->\\n  </div>\\n  <!-- /.content-header -->\\n\\n  <!-- Main content -->\\n  <section class=\\\"content\\\">\\n    <router-outlet></router-outlet>\\n    </section>\\n  <!-- /.content -->\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../_services/user.service';\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\nuserDisplayName = '';\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userDisplayName = this.userService.user.userName; \n  }\n\n  \n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2VkaXR1c2VyL2VkaXR1c2VyLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<h2>Edit User</h2>\\n<form [formGroup]=\\\"editUserForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"firstName\\\">First Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"lastName\\\">Last Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"userName\\\">Username</label>\\n        <input type=\\\"text\\\" formControlName=\\\"userName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.userName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.userName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.userName.errors.required\\\">Username is required</div>\\n        </div>\\n    </div>\\n    <!-- <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n            <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n        </div>\\n    </div>  -->\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input type=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.email.errors.required\\\">Password is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"dob\\\">Date of Birth</label>\\n        <input type=\\\"date\\\" formControlName=\\\"dob\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.dob.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.dob.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.dob.errors.required\\\">Password is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"gender\\\">Gender</label>\\n        <input type=\\\"text\\\" formControlName=\\\"gender\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.gender.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.gender.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.gender.errors.required\\\">Password is required</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Edit</button>\\n        <a [routerLink]=\\\"['/admin']\\\" class=\\\"btn btn-link\\\">Cancel</a>\\n      </div>\\n      <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n      \\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UserService } from '../_services/user.service';\nimport { User } from '../_models/user';\n\n@Component({\n    selector: 'app-edituser',\n    templateUrl: './edituser.component.html',\n    styleUrls: ['./edituser.component.css']\n})\nexport class EdituserComponent implements OnInit {\n    editUserForm: FormGroup;\n    loading = false;\n    submitted = false;\n    user_id: number;\n    user: User;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private route: ActivatedRoute,\n        private userService: UserService,\n    ) { }\n\n    ngOnInit() {\n        this.user_id = +this.route.snapshot.paramMap.get('id');\n\n        this.editUserForm = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            userName: ['', Validators.required],\n            email: ['', Validators.required],\n            gender: ['', Validators.required],\n            dob: ['', Validators.required],\n        });\n        this.initForm();\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.editUserForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.editUserForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.userService.updateUser(this.editUserForm.value)\n            .then(\n                data => {\n                    this.router.navigate(['/admin']);\n                },\n                error => {\n                    this.loading = false;\n                });\n    }\n\n    private initForm() {\n        this.userService.getUserById(this.user_id).then(data => {\n            if (data != null) {\n                this.editUserForm = new FormGroup({\n                    'id': new FormControl(data.id),\n                    'firstName': new FormControl(data.firstName, Validators.required),\n                    'lastName': new FormControl(data.lastName, Validators.required),\n                    'userName': new FormControl(data.userName, Validators.required),\n                    'email': new FormControl(data.email, Validators.required),\n                    'gender': new FormControl(data.gender, Validators.required),\n                    'dob': new FormControl(data.dob, Validators.required),\n                    'role': new FormControl(data.role)\n                });\n            }\n        });\n    }\n}\n","module.exports = \".pull-right{\\r\\n    float: right !important;\\r\\n  }\\r\\n\\r\\n.pull-left{\\r\\n    float: left !important;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZXhhbS9leGFtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSx1QkFBdUI7RUFDekI7O0FBRUY7SUFDSSxzQkFBc0I7RUFDeEIiLCJmaWxlIjoic3JjL2FwcC9leGFtL2V4YW0uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wdWxsLXJpZ2h0e1xyXG4gICAgZmxvYXQ6IHJpZ2h0ICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG5cclxuLnB1bGwtbGVmdHtcclxuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7XHJcbiAgfSJdfQ== */\"","module.exports = \"<h2>Create New Exam</h2>\\n<br/>\\n<form [formGroup]=\\\"createExamForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"name\\\">Exam title</label>\\n    <input type=\\\"text\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.name.errors }\\\" />\\n    <div *ngIf=\\\"submitted && f.name.errors\\\" class=\\\"invalid-feedback\\\">\\n        <div *ngIf=\\\"f.name.errors.required\\\">title is required</div>\\n    </div>\\n</div>\\n  <div class=\\\"form-group\\\">\\n    <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary pull-right\\\">Submit</button>\\n  </div>\\n\\n  <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserService } from '../_services/user.service';\nimport { Router } from '@angular/router';\nimport { ExamService } from '../_services/exam.service';\n\n@Component({\n  selector: 'app-exam',\n  templateUrl: './exam.component.html',\n  styleUrls: ['./exam.component.css']\n})\nexport class ExamComponent implements OnInit {\n  createExamForm: FormGroup;\n  loading = false;\n  submitted = false;\n  constructor( private formBuilder: FormBuilder,\n    private userService: UserService,\n    private examService: ExamService,\n    private router: Router\n    ) { }\n\n  ngOnInit() {\n    this.createExamForm = this.formBuilder.group({\n      name: ['',Validators.required]\n  }); \n  }\n\n   // convenience getter for easy access to form fields\n   get f() { return this.createExamForm.controls; }\n\n   onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.createExamForm.invalid) {\n        return;\n    }\n\n    this.loading = true;\n    this.examService.createExam(this.createExamForm.value)\n    .then(\n        data => {\n            this.router.navigate(['/admin']);  \n        },\n        error => {\n            this.loading = false;\n        });\n\n}\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2V4YW1hc3NpZ24vZXhhbWFzc2lnbi5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h2>Edit User</h2>\\n<form [formGroup]=\\\"examassign\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"assignTo\\\">Exam Assign to </label>\\n        <select formControlName=\\\"assignTo\\\" class=\\\"selectpicker dropdown mt-4 ml-3\\\" id=\\\"type\\\" data-live-search=\\\"true\\\"\\n            (change)=\\\"selectOption($event.target.value)\\\" [(ngModel)]=\\\"selected\\\">\\n            <option *ngFor=\\\"let user of users$ | async\\\" [value]=\\\"user.id\\\">{{user.userName}}</option>\\n        </select>\\n        <div *ngIf=\\\"submitted && f.assignTo.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.assignTo.errors.required\\\">Exam assign to is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"description\\\">Description</label>\\n        <input type=\\\"text\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.description.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.description.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.description.errors.required\\\">description is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"exam\\\">Select Exam</label>\\n        <select formControlName=\\\"exam\\\" class=\\\"selectpicker dropdown mt-4 ml-3\\\" id=\\\"type\\\" data-live-search=\\\"true\\\">\\n            <option *ngFor=\\\"let exam of exams$ | async\\\" [value]=\\\"exam.id\\\">{{exam.name}}</option>\\n        </select>\\n        <div *ngIf=\\\"submitted && f.exam.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.exam.errors.required\\\">exam is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary pull-right\\\">Next</button>\\n    </div>\\n    <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from '../_services/user.service';\nimport { ExamService } from '../_services/exam.service';\n\n@Component({\n    selector: 'app-examassign',\n    templateUrl: './examassign.component.html',\n    styleUrls: ['./examassign.component.css']\n})\nexport class ExamassignComponent implements OnInit {\n\n    examassign: FormGroup;\n    loading = false;\n    submitted = false;\n    users$;\n    exams$;\n    selected: number = 0;\n    constructor(private formBuilder: FormBuilder,\n        private userService: UserService,\n        private examService: ExamService,\n        private router: Router\n    ) { }\n\n    selectOption(id: number) {\n        //getted from event\n        console.log(id);\n      }\n\n    getUsers() {\n        return this.userService.getusers();\n    }\n\n    getExams() {\n        return this.examService.getExams();\n    }\n\n    ngOnInit() {\n        this.examassign = this.formBuilder.group({\n            assignTo: ['', Validators.required],\n            description: ['', Validators.required],\n            exam: ['', Validators.required]\n        });\n        this.users$ = this.getUsers();\n        this.exams$ = this.getExams();\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.examassign.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n        // stop here if form is invalid\n        if (this.examassign.invalid) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.userService.getUserById(this.users$)\n        .then(\n            data => {\n                // this.router.navigate(['/#']);\n                console.log(data);\n            },\n            error => {\n                this.loading = false;\n            });\n       \n        this.examService.examAssign(this.examassign.value)\n            .then(\n                data => {\n                    this.router.navigate(['/#']);\n                },\n                error => {\n                    this.loading = false;\n                });\n\n    }\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2ZvcmdvdHBhc3N3b3JkL2ZvcmdvdHBhc3N3b3JkLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6 offset-md-3\\\">\\n                <form [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"onSubmit()\\\" style=\\\"padding: 50px;\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"email\\\">Email</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.email.errors.required || f.email.errors.email\\\">Email must be a valid email address</div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"form-group\\\">\\n                        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n                        <a [routerLink]=\\\"['/login']\\\" class=\\\"btn btn-link\\\">Cancel</a>\\n                    </div>\\n                    <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../_services/user.service';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-forgotpassword',\n  templateUrl: './forgotpassword.component.html',\n  styleUrls: ['./forgotpassword.component.css']\n})\nexport class ForgotpasswordComponent implements OnInit {\n  resetForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n  error = '';\n  constructor(private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService) { }\n\n  ngOnInit() {\n    this.resetForm = this.formBuilder.group({\n      email: ['', [Validators.required,Validators.email]],\n  });\n\n \n  // get return url from route parameters or default to '/'\n  this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n   // convenience getter for easy access to form fields\n   get f() { return this.resetForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.resetForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.authService.forgotpassword(this.resetForm.value)\n        .then(\n            data => {\n              window.confirm('Please check your email!'); \n              this.router.navigate(['/login']);        \n            },\n            error => {\n                this.loading = false;\n            });\n}\n\n\n}\n","module.exports = \"<!-- <h1>Hi {{userDisplayName}}!</h1>\\n<p>You're logged in!!</p> -->\\n<app-appheader></app-appheader>\\n<app-appmenu></app-appmenu>\\n<app-dashboard></app-dashboard>\\n<app-appfooter></app-appfooter>\\n\"","import { Component } from '@angular/core';\nimport { UserService } from '../_services/user.service';\nimport { Router } from '@angular/router';\nimport { RoleName } from '../_models/role';\n\n@Component({templateUrl: 'home.component.html'})\nexport class HomeComponent {\n    constructor( private router: Router,\n        private userService: UserService) { }\n    ngOnInit() {\n        if(this.userService.user.role === RoleName.Admin){\n            this.router.navigate(['/admin']);\n        }else{\n            this.router.navigate(['/userPage']);\n        }\n    }\n\n    logout() {          \n        sessionStorage.removeItem(\"loggedUser\");\n        this.userService.user = null;\n        this.router.navigate(['/login']);\n      }\n}","module.exports = \"<div>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6 offset-md-3\\\">\\n                <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\" style=\\\"padding: 50px;\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"usernameOrEmail\\\">Username</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"usernameOrEmail\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.usernameOrEmail.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.usernameOrEmail.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.usernameOrEmail.errors.required\\\">Username is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"password\\\">Password</label>\\n                        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Login</button>\\n                        <a routerLink=\\\"/register\\\" class=\\\"btn btn-link\\\">Register</a>\\n                        <a routerLink=\\\"/forgot\\\">Forgot Password</a>\\n                    </div>\\n                    <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../_services/user.service';\nimport { AuthService } from '../_services/auth.service';\nimport { RoleName } from '../_models/role';\n\n@Component({selector: 'app-login',templateUrl: 'login.component.html'})\nexport class LoginComponent implements OnInit {\n    loginForm: FormGroup;\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n    error = '';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private userService: UserService,\n        private authService: AuthService\n    ) { }\n\n    ngOnInit() {\n        this.loginForm = this.formBuilder.group({\n            usernameOrEmail: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authService.login(this.loginForm.value)\n            .then(\n                data => {\n                    if(data != null){\n                        this.getUserInfobyLogin(data.accessToken);\n                    }               \n                },\n                error => {\n                    this.loading = false;\n                    window.confirm('Password not matched! Please enter correct paasword');\n                });\n    }\n\n    private getUserInfobyLogin(token) {\n     this.userService.getUserbyToken(token)  \n     .then(\n        data => {\n            if(data != null){\n                if(data.role === RoleName.Admin){\n                    //set data in session \n                    sessionStorage.setItem('user', JSON.stringify(data));\n                    // sessionStorage.setItem('loggedUserRole', data.role.name);\n                    this.router.navigate(['/admin']);\n                }else{\n                    sessionStorage.setItem('user', JSON.stringify(data));\n                // sessionStorage.setItem('loggedUserRole', data.role.name);\n                 this.router.navigate(['/userPage']);\n                }\n            }               \n        },\n        error => {\n            this.loading = false;\n            window.confirm('Password not matched! Please enter correct paasword');\n        });\n     \n       \n    }\n    \n}","module.exports = \".example-radio-button {\\r\\n    margin: 5px !important;\\r\\n  }\\r\\n  \\r\\n  :host ::ng-deep .mat-radio-outer-circle{\\r\\n    border-style: none;\\r\\n  }\\r\\n  \\r\\n  .pull-right{\\r\\n    float: right !important;\\r\\n  }\\r\\n  \\r\\n  .pull-left{\\r\\n    float: left !important;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcXVlc3Rpb24vYWRkLXF1ZXN0aW9ucy9hZGQtcXVlc3Rpb25zLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxzQkFBc0I7RUFDeEI7O0VBRUE7SUFDRSxrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSx1QkFBdUI7RUFDekI7O0VBRUY7SUFDSSxzQkFBc0I7RUFDeEIiLCJmaWxlIjoic3JjL2FwcC9xdWVzdGlvbi9hZGQtcXVlc3Rpb25zL2FkZC1xdWVzdGlvbnMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5leGFtcGxlLXJhZGlvLWJ1dHRvbiB7XHJcbiAgICBtYXJnaW46IDVweCAhaW1wb3J0YW50O1xyXG4gIH1cclxuICBcclxuICA6aG9zdCA6Om5nLWRlZXAgLm1hdC1yYWRpby1vdXRlci1jaXJjbGV7XHJcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XHJcbiAgfVxyXG5cclxuICAucHVsbC1yaWdodHtcclxuICAgIGZsb2F0OiByaWdodCAhaW1wb3J0YW50O1xyXG4gIH1cclxuXHJcbi5wdWxsLWxlZnR7XHJcbiAgICBmbG9hdDogbGVmdCAhaW1wb3J0YW50O1xyXG4gIH0iXX0= */\"","module.exports = \"<!-- <form (ngSubmit)=\\\"onSubmit()\\\" #selectExamForm=\\\"ngForm\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"examid\\\">Select Exam</label>\\n    <select class=\\\"form-control\\\" id=\\\"examid\\\" name=\\\"examid\\\" ngModel #examid=\\\"ngModel\\\">\\n      <option *ngFor=\\\"let exam of exams$ | async\\\" [value]=\\\"exam.id\\\" \\n      ng-selected=\\\"exam.id == examid\\\">{{exam.name}}</option>\\n    </select>\\n    <span class=\\\"help-block\\\" *ngIf=\\\"!examid.valid && examid.touched\\\">Plase Select a Exam!</span>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary pull-right\\\">Next</button>\\n  </div>\\n\\n  <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n\\n</form> -->\\n<section class=\\\"content\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <!-- SELECT2 EXAMPLE -->\\n    <div class=\\\"card card-default\\\">\\n      <div class=\\\"card-header\\\">\\n        <h3 class=\\\"card-title\\\">Selected Exam is : {{selectedExam}}</h3>\\n\\n        <div class=\\\"card-tools\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-tool\\\" data-card-widget=\\\"collapse\\\"><i class=\\\"fas fa-minus\\\"></i></button>\\n          <button type=\\\"button\\\" class=\\\"btn btn-tool\\\" data-card-widget=\\\"remove\\\"><i class=\\\"fas fa-remove\\\"></i></button>\\n        </div>\\n      </div>\\n      <!-- /.card-header -->\\n      <div class=\\\"card-body\\\">\\n\\n        <form [formGroup]=\\\"createQuetionForm\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"question\\\">Add Que</label>\\n                <input type=\\\"text\\\" formControlName=\\\"question\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.question.errors }\\\" />\\n                <div *ngIf=\\\"submitted && f.question.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.question.errors.required\\\">question is required</div>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <mat-radio-group class=\\\"example-radio-group\\\" formControlName=\\\"ansCategory\\\" [(ngModel)]=\\\"selectedAnsType\\\">\\n              <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let ansType of ansTypes\\\" [value]=\\\"ansType\\\">\\n                {{ansType}}\\n              </mat-radio-button>\\n            </mat-radio-group>\\n          </div>\\n\\n          <div class=\\\"input-container\\\">\\n\\n            <div *ngIf=\\\"selectedAnsType=='Text ans'\\\">\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"correct_ans\\\">Correct ans</label>\\n                <input type=\\\"correct_ans\\\" formControlName=\\\"correct_ans\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.correct_ans.errors }\\\" />\\n                <div *ngIf=\\\"submitted && f.correct_ans.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.correct_ans.errors.required\\\">Correct ans is required</div>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div *ngIf=\\\"selectedAnsType=='Single select'\\\">\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"option1\\\">Option1</label>\\n                    <input type=\\\"option1\\\" formControlName=\\\"option1\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option1.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.option1.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.option1.errors.required\\\">option1 ans is required</div>\\n                    </div>\\n                  </div>\\n                  <!-- /.form-group -->\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"option2\\\">Option2</label>\\n                    <input type=\\\"option2\\\" formControlName=\\\"option2\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option2.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.option2.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.option2.errors.required\\\">option2 ans is required</div>\\n                    </div>\\n                  </div>\\n                  <!-- /.form-group -->\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"option3\\\">Option3</label>\\n                    <input type=\\\"option3\\\" formControlName=\\\"option3\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option3.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.option3.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.option3.errors.required\\\">option3 ans is required</div>\\n                    </div>\\n                  </div>\\n                  <!-- /.form-group -->\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"option4\\\">Option4</label>\\n                    <input type=\\\"option4\\\" formControlName=\\\"option4\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option4.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.option4.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.option4.errors.required\\\">option4 ans is required</div>\\n                    </div>\\n                  </div>\\n                  <!-- /.form-group -->\\n                </div>\\n                <!-- /.col -->\\n                <div class=\\\"col-md-6\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"option1IsAns\\\">Option1 Is Ans</label><br>\\n                    <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                      formControlName=\\\"option1IsAns\\\">\\n                      <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let op1 of booleanValue\\\" [value]=\\\"op1\\\">\\n                        {{op1}}\\n                      </mat-radio-button>\\n                    </mat-radio-group>\\n                    <div *ngIf=\\\"submitted && f.option1IsAns.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.option1IsAns.errors.required\\\">option1IsAns is required</div>\\n                    </div>\\n                  </div>\\n                  <!-- /.form-group -->\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"option2IsAns\\\">Option2 Is Ans</label><br>\\n                    <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                      formControlName=\\\"option2IsAns\\\">\\n                      <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let op2 of booleanValue\\\" [value]=\\\"op2\\\">\\n                        {{op2}}\\n                      </mat-radio-button>\\n                    </mat-radio-group>\\n                    <div *ngIf=\\\"submitted && f.option2IsAns.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.option2IsAns.errors.required\\\">option2IsAns is required</div>\\n                    </div>\\n                  </div>\\n                  <!-- /.form-group -->\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"option3IsAns\\\">Option3 Is Ans</label><br>\\n                    <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                      formControlName=\\\"option3IsAns\\\">\\n                      <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let op3 of booleanValue\\\" [value]=\\\"op3\\\">\\n                        {{op3}}\\n                      </mat-radio-button>\\n                    </mat-radio-group>\\n                    <div *ngIf=\\\"submitted && f.option3IsAns.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.option3IsAns.errors.required\\\">option3IsAns is required</div>\\n                    </div>\\n                  </div>\\n                  <!-- /.form-group -->\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"option4IsAns\\\">Option4 Is Ans</label><br>\\n                    <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                      formControlName=\\\"option4IsAns\\\">\\n                      <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let op4 of booleanValue\\\" [value]=\\\"op4\\\">\\n                        {{op4}}\\n                      </mat-radio-button>\\n                    </mat-radio-group>\\n                    <div *ngIf=\\\"submitted && f.option4IsAns.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.option4IsAns.errors.required\\\">option4IsAns is required</div>\\n                    </div>\\n                  </div>\\n                  <!-- /.form-group -->\\n                </div>\\n                <!-- /.col -->\\n              </div>\\n              <!-- /.row -->\\n            </div>\\n\\n            <div *ngIf=\\\"selectedAnsType=='Multi select'\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-6\\\">\\n                      <div class=\\\"form-group\\\">\\n                        <label for=\\\"option1\\\">Option1</label>\\n                        <input type=\\\"option1\\\" formControlName=\\\"option1\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option1.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.option1.errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f.option1.errors.required\\\">option1 ans is required</div>\\n                        </div>\\n                      </div>\\n                      <!-- /.form-group -->\\n                      <div class=\\\"form-group\\\">\\n                        <label for=\\\"option2\\\">Option2</label>\\n                        <input type=\\\"option2\\\" formControlName=\\\"option2\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option2.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.option2.errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f.option2.errors.required\\\">option2 ans is required</div>\\n                        </div>\\n                      </div>\\n                      <!-- /.form-group -->\\n                      <div class=\\\"form-group\\\">\\n                        <label for=\\\"option3\\\">Option3</label>\\n                        <input type=\\\"option3\\\" formControlName=\\\"option3\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option3.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.option3.errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f.option3.errors.required\\\">option3 ans is required</div>\\n                        </div>\\n                      </div>\\n                      <!-- /.form-group -->\\n                      <div class=\\\"form-group\\\">\\n                        <label for=\\\"option4\\\">Option4</label>\\n                        <input type=\\\"option4\\\" formControlName=\\\"option4\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option4.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.option4.errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f.option4.errors.required\\\">option4 ans is required</div>\\n                        </div>\\n                      </div>\\n                      <!-- /.form-group -->\\n                    </div>\\n                    <!-- /.col -->\\n                    <div class=\\\"col-md-6\\\">\\n                      <div class=\\\"form-group\\\">\\n                        <label for=\\\"option1IsAns\\\">Option1 Is Ans</label><br>\\n                        <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                          formControlName=\\\"option1IsAns\\\">\\n                          <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let op1 of booleanValue\\\" [value]=\\\"op1\\\">\\n                            {{op1}}\\n                          </mat-radio-button>\\n                        </mat-radio-group>\\n                        <div *ngIf=\\\"submitted && f.option1IsAns.errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f.option1IsAns.errors.required\\\">option1IsAns is required</div>\\n                        </div>\\n                      </div>\\n                      <!-- /.form-group -->\\n                      <div class=\\\"form-group\\\">\\n                        <label for=\\\"option2IsAns\\\">Option2 Is Ans</label><br>\\n                        <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                          formControlName=\\\"option2IsAns\\\">\\n                          <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let op2 of booleanValue\\\" [value]=\\\"op2\\\">\\n                            {{op2}}\\n                          </mat-radio-button>\\n                        </mat-radio-group>\\n                        <div *ngIf=\\\"submitted && f.option2IsAns.errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f.option2IsAns.errors.required\\\">option2IsAns is required</div>\\n                        </div>\\n                      </div>\\n                      <!-- /.form-group -->\\n                      <div class=\\\"form-group\\\">\\n                        <label for=\\\"option3IsAns\\\">Option3 Is Ans</label><br>\\n                        <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                          formControlName=\\\"option3IsAns\\\">\\n                          <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let op3 of booleanValue\\\" [value]=\\\"op3\\\">\\n                            {{op3}}\\n                          </mat-radio-button>\\n                        </mat-radio-group>\\n                        <div *ngIf=\\\"submitted && f.option3IsAns.errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f.option3IsAns.errors.required\\\">option3IsAns is required</div>\\n                        </div>\\n                      </div>\\n                      <!-- /.form-group -->\\n                      <div class=\\\"form-group\\\">\\n                        <label for=\\\"option4IsAns\\\">Option4 Is Ans</label><br>\\n                        <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                          formControlName=\\\"option4IsAns\\\">\\n                          <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let op4 of booleanValue\\\" [value]=\\\"op4\\\">\\n                            {{op4}}\\n                          </mat-radio-button>\\n                        </mat-radio-group>\\n                        <div *ngIf=\\\"submitted && f.option4IsAns.errors\\\" class=\\\"invalid-feedback\\\">\\n                          <div *ngIf=\\\"f.option4IsAns.errors.required\\\">option4IsAns is required</div>\\n                        </div>\\n                      </div>\\n                      <!-- /.form-group -->\\n                    </div>\\n                    <!-- /.col -->\\n                  </div>\\n                  <!-- /.row -->\\n\\n            </div>\\n\\n          </div>\\n\\n\\n\\n          <div class=\\\"form-group\\\">\\n            <button [disabled]=\\\"loading\\\" (click)=\\\"onFinalSubmit()\\\" class=\\\"btn btn-primary pull-right\\\">Finish</button>\\n            <button [disabled]=\\\"loading\\\" (click)=\\\"onSubmit();\\\" type=\\\"reset\\\" create class=\\\"btn btn-primary pull-right\\\">Next</button>\\n          </div>\\n          <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n\\n        </form>\\n\\n      </div>\\n      <!-- /.card-body -->\\n    </div>\\n    <!-- /.card -->\\n  </div>\\n\\n</section>\"","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { QuestionService } from 'src/app/_services/question.service';\nimport { ExamService } from 'src/app/_services/exam.service';\n\n\n@Component({\n  selector: 'app-add-questions',\n  templateUrl: './add-questions.component.html',\n  styleUrls: ['./add-questions.component.css']\n})\nexport class AddQuestionsComponent implements OnInit {\n  createQuetionForm: FormGroup;\n  loading = false;\n  submitted = false;\n  booleanValue: string[] = ['True', 'False'];\n  exams$;\n  selectedAnsType: string;\n  ansTypes: string[] = ['Text ans', 'Single select', 'Multi select'];\n  selectedExam;\n\n  constructor(private formBuilder: FormBuilder,\n      private router: Router,\n      private questionService: QuestionService,\n      private examService: ExamService,\n      private ngZone: NgZone) { }\n\n\n  getExams() {\n      return this.examService.getExams();\n  }\n  ngOnInit() {\n      this.selectedExam = this.examService.selectedExam.name\n      this.selectedAnsType = this.ansTypes[0];\n      this.exams$ = this.getExams();\n      this.createQuetionForm = this.formBuilder.group({\n          question: ['', Validators.required],\n          ansCategory: [''],\n          correct_ans: [''],\n          option1: [''],\n          option2: [''],\n          option3: [''],\n          option4: [''],\n          option1IsAns: [''],\n          option2IsAns: [''],\n          option3IsAns: [''],\n          option4IsAns: [''],\n      });\n  }\n\n  get f() { return this.createQuetionForm.controls; }\n\n  onSubmit() {\n      this.submitted = true;\n      // stop here if form is invalid\n      if (this.createQuetionForm.invalid) {\n          return;\n      }\n\n      this.loading = true;\n      this.questionService.createQuestion(this.createQuetionForm.value)\n          .then(\n              data => {\n                  this.createQuetionForm.reset();\n                  Object.keys(this.createQuetionForm.controls).forEach(key => {\n                      this.createQuetionForm.controls[key].setErrors(null)\n                  });\n                  this.loading = false;\n                  this.router.navigateByUrl('/question/add');\n                  \n              },\n              error => {\n                  this.loading = false;\n              });\n\n  }\n\n  onFinalSubmit() {\n      this.submitted = true;\n      // stop here if form is invalid\n      if (this.createQuetionForm.invalid) {\n          return;\n      }\n\n      this.loading = true;\n      this.questionService.createQuestion(this.createQuetionForm.value)\n          .then(\n              data => {\n                  this.router.navigate(['/admin']);\n              },\n              error => {\n                  this.loading = false;\n              });\n  }\n\n}\n","module.exports = \".example-radio-button {\\r\\n  margin: 5px !important;\\r\\n}\\r\\n\\r\\n:host ::ng-deep .mat-radio-outer-circle{\\r\\n  border-style: none;\\r\\n}\\r\\n\\r\\n.select2.ng-invalid.ng-touched {\\r\\n  border: 1px solid red\\r\\n}\\r\\n\\r\\n.pull-right{\\r\\n  float: right !important;\\r\\n}\\r\\n\\r\\n.pull-left{\\r\\n  float: left !important;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcXVlc3Rpb24vcXVlc3Rpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFO0FBQ0Y7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEIiLCJmaWxlIjoic3JjL2FwcC9xdWVzdGlvbi9xdWVzdGlvbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV4YW1wbGUtcmFkaW8tYnV0dG9uIHtcclxuICBtYXJnaW46IDVweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG46aG9zdCA6Om5nLWRlZXAgLm1hdC1yYWRpby1vdXRlci1jaXJjbGV7XHJcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xyXG59XHJcblxyXG4uc2VsZWN0Mi5uZy1pbnZhbGlkLm5nLXRvdWNoZWQge1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJlZFxyXG59XHJcblxyXG4ucHVsbC1yaWdodHtcclxuICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLnB1bGwtbGVmdHtcclxuICBmbG9hdDogbGVmdCAhaW1wb3J0YW50O1xyXG59Il19 */\"","module.exports = \"<!-- <form (ngSubmit)=\\\"onSubmit()\\\" #selectExamForm=\\\"ngForm\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"examid\\\">Select Exam</label>\\n    <select class=\\\"form-control\\\" id=\\\"examid\\\" name=\\\"examid\\\" ngModel #examid=\\\"ngModel\\\">\\n      <option *ngFor=\\\"let exam of exams$ | async\\\" [value]=\\\"exam.id\\\" \\n      ng-selected=\\\"exam.id == examid\\\">{{exam.name}}</option>\\n    </select>\\n    <span class=\\\"help-block\\\" *ngIf=\\\"!examid.valid && examid.touched\\\">Plase Select a Exam!</span>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary pull-right\\\">Next</button>\\n  </div>\\n\\n  <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n\\n</form> -->\\n<section class=\\\"content\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <!-- SELECT2 EXAMPLE -->\\n    <div class=\\\"card card-default\\\">\\n      <div class=\\\"card-header\\\">\\n        <h3 class=\\\"card-title\\\">Select Exam</h3>\\n\\n        <div class=\\\"card-tools\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-tool\\\" data-card-widget=\\\"collapse\\\"><i class=\\\"fas fa-minus\\\"></i></button>\\n          <button type=\\\"button\\\" class=\\\"btn btn-tool\\\" data-card-widget=\\\"remove\\\"><i class=\\\"fas fa-remove\\\"></i></button>\\n        </div>\\n      </div>\\n      <!-- /.card-header -->\\n      <div class=\\\"card-body\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6\\\">\\n            <form (ngSubmit)=\\\"onSubmit()\\\" #selectExamForm=\\\"ngForm\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Exam</label>\\n                <select class=\\\"form-control select2\\\" style=\\\"width: 100%;\\\" name=\\\"examid\\\" ngModel examid #examid=\\\"ngModel\\\" required >\\n                  <option *ngFor=\\\"let exam of exams$ | async;\\\" [value]=\\\"exam.id\\\" selected=\\\"exam.id == examid\\\"\\n                   >{{exam.name}}</option>\\n                </select>\\n                <span class=\\\"help-block\\\" *ngIf=\\\"!examid.valid && examid.touched\\\">Plase Select a Exam!</span>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <button [disabled]=\\\"!selectExamForm.valid\\\" class=\\\"btn btn-primary pull-right\\\">Next</button>\\n              </div>\\n              <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n            </form>\\n          </div>\\n          <!-- /.col -->\\n        </div>\\n        <!-- /.row -->\\n      </div>\\n      <!-- /.card-body -->\\n    </div>\\n    <!-- /.card -->\\n  </div>\\n\\n</section>\"","import { Component, OnInit, NgZone, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { QuestionService } from '../_services/question.service';\nimport { ExamService } from '../_services/exam.service';\n\n@Component({\n    selector: 'app-question',\n    templateUrl: './question.component.html',\n    styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit {\n    @ViewChild('selectExamForm') selectExamForm: NgForm;\n    loading = false;\n    submitted = false;\n    booleanValue: string[] = ['true', 'false'];\n    exams$;\n    examid;\n\n    constructor(private formBuilder: FormBuilder,\n        private router: Router,\n        private examService: ExamService) {}\n\n    getExams() {\n        return this.examService.getExams();\n    }\n    ngOnInit() {\n        this.exams$ = this.getExams();\n    }\n\n    get f() { return this.selectExamForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n        // stop here if form is invalid\n        if (this.selectExamForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.examService.getExamById(this.selectExamForm.value.examid)\n        .then(\n            data => {\n               this.examService.selectedExam = data;\n               this.router.navigate(['/question/add']);  \n            },\n            error => {\n                this.loading = false;\n            });\n\n\n    }\n\n}\n","module.exports = \"  .example-radio-button {\\r\\n    margin: 5px !important;\\r\\n  }\\r\\n  \\r\\n  :host ::ng-deep .mat-radio-outer-circle{\\r\\n    border-style: none;\\r\\n  }\\r\\n  \\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiRUFBRTtJQUNFLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLGtCQUFrQjtFQUNwQiIsImZpbGUiOiJzcmMvYXBwL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIgIC5leGFtcGxlLXJhZGlvLWJ1dHRvbiB7XHJcbiAgICBtYXJnaW46IDVweCAhaW1wb3J0YW50O1xyXG4gIH1cclxuICBcclxuICA6aG9zdCA6Om5nLWRlZXAgLm1hdC1yYWRpby1vdXRlci1jaXJjbGV7XHJcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XHJcbiAgfVxyXG4gICJdfQ== */\"","module.exports = \"<div>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6 offset-md-3\\\">\\n                <h2>Register</h2>\\n                <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"firstName\\\">First Name</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"lastName\\\">Last Name</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"userName\\\">Username</label>\\n                        <input type=\\\"text\\\" formControlName=\\\"userName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.userName.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.userName.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.userName.errors.required\\\">Username is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"password\\\">Password</label>\\n                        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                            <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"email\\\">Email</label>\\n                        <input type=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"dob\\\">Date of Birth</label>\\n                        <input type=\\\"date\\\" formControlName=\\\"dob\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.dob.errors }\\\" />\\n                        <div *ngIf=\\\"submitted && f.dob.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.dob.errors.required\\\">DOB is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label id=\\\"example-radio-group-label\\\">Please selecet Gender  </label>\\n                        <mat-radio-group aria-labelledby=\\\"example-radio-group-label\\\" class=\\\"example-radio-group\\\"\\n                            formControlName=\\\"gender\\\">\\n                            <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let gender of genders\\\" [value]=\\\"gender\\\">\\n                                {{gender}}\\n                            </mat-radio-button>\\n                        </mat-radio-group>\\n                        <div *ngIf=\\\"submitted && f.gender.errors\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"f.gender.errors.required\\\">Gender is required</div>\\n                        </div>\\n\\n                    </div>\\n\\n                    <div class=\\\"form-group\\\" *ngIf=\\\"isAdmin;then content else other_content\\\">\\n                        <!-- this is ignored -->\\n                    </div>\\n\\n                    <ng-template #content>\\n                        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Register</button>\\n                        <a [routerLink]=\\\"['/admin']\\\" class=\\\"btn btn-link\\\">Cancel</a>\\n                    </ng-template>\\n                    \\n                    <ng-template #other_content>\\n                        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Register</button>\\n                        <a [routerLink]=\\\"['/login']\\\" class=\\\"btn btn-link\\\">Cancel</a>\\n                    </ng-template>\\n\\n                    <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from '../_services/user.service';\nimport { RoleName } from '../_models/role';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n    genders: string[] = ['Male', 'Female'];\n    registerForm: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private userService: UserService,\n        private authService: AuthService\n    ) { }\n\n    ngOnInit() {\n        this.registerForm = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            userName: ['', Validators.required],\n            password: ['', Validators.required],\n            email: ['', Validators.required],\n            gender: ['', Validators.required],\n            dob: ['', Validators.required]\n        });\n    }\n\n    get isAdmin() {\n        return this.userService.user && this.userService.user.role === RoleName.Admin;\n    }\n\n    get isUser() {\n        return this.userService.user && this.userService.user.role === RoleName.User;\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.registerForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.registerForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authService.createUser(this.registerForm.value)\n            .then(\n                data => {\n                    this.router.navigate(['/admin']);\n                },\n                error => {\n                    this.loading = false;\n                });\n    }\n\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\nexport class PassWordValidator {\r\n  \r\n  static matchPwds(control: AbstractControl) {\r\n    let newPwd2 = control.get('password');\r\n    let confirmPwd2 = control.get('confirmPwd');\r\n    if(newPwd2.value !== confirmPwd2.value){\r\n      return { pwdsDontMatch: true };\r\n    }\r\n    return null;\r\n  }\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Jlc2V0cGFzc3dvcmQvcmVzZXRwYXNzd29yZC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<form [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <div class=\\\"form-group\\\">\\n      <label for=\\\"password\\\">Password</label>\\n      <input type=\\\"text\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n      <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.password.errors.required\\\">password is required</div>\\n      </div>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label>Confirm Password</label>\\n    <input type=\\\"text\\\" formControlName=\\\"confirmPwd\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.confirmPwd.errors }\\\" />\\n      <div *ngIf=\\\"submitted && f.confirmPwd.errors\\\" class=\\\"invalid-feedback\\\">\\n          <div *ngIf=\\\"f.confirmPwd.errors.required\\\">confirmPwd is required</div>\\n      </div>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n      <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n  </div>\\n  <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../_services/user.service';\nimport { PassWordValidator } from './password.validator';\nimport { User } from '../_models/user';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-resetpassword',\n  templateUrl: './resetpassword.component.html',\n  styleUrls: ['./resetpassword.component.css']\n})\nexport class ResetpasswordComponent implements OnInit {\n  resetForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n  error = '';\n  token: string;\n  user : any;\n  \n  constructor( private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService) {\n\n    }\n\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      this.token = params['token'];\n    })\n    \n    this.resetForm = this.formBuilder.group({\n      password: ['', Validators.required],\n      confirmPwd: ['', Validators.required],\n      token: [this.token, Validators.required]\n    },{\n      validator: PassWordValidator.matchPwds\n    });\n       \n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.resetForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.resetForm.invalid) {\n        return;\n    }\n    this.loading = true;\n    this.authService.resetpassword(this.resetForm.value).then(\n            data => {\n              this.router.navigate(['/login']);           \n            },\n            error => {\n                this.loading = false;\n            });\n}\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VzZXJlZGl0cHJvZmlsZS91c2VyZWRpdHByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<h2>Edit User</h2>\\n<form [formGroup]=\\\"profileUserForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"firstName\\\">First Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"lastName\\\">Last Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"userName\\\">Username</label>\\n        <input type=\\\"text\\\" formControlName=\\\"userName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.userName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.userName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.userName.errors.required\\\">Username is required</div>\\n        </div>\\n    </div>\\n    <!-- <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n            <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n        </div>\\n    </div>  -->\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input type=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"dob\\\">Date of Birth</label>\\n        <input type=\\\"date\\\" formControlName=\\\"dob\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.dob.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.dob.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.dob.errors.required\\\">Dob is required</div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"gender\\\">Gender</label>\\n        <input type=\\\"text\\\" formControlName=\\\"gender\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.gender.errors }\\\" />\\n        <div *ngIf=\\\"submitted && f.gender.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.gender.errors.required\\\">Gender is required</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Edit</button>\\n        <a [routerLink]=\\\"['/profile']\\\" class=\\\"btn btn-link\\\">Cancel</a>\\n      </div>\\n      <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n      \\n</form>\\n\"","import { Component, OnInit, NgZone, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute, NavigationEnd, RouterEvent } from '@angular/router';\nimport { UserService } from '../_services/user.service';\nimport { RoleName } from '../_models/role';\nimport { Location } from '@angular/common';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-usereditprofile',\n    templateUrl: './usereditprofile.component.html',\n    styleUrls: ['./usereditprofile.component.css']\n})\nexport class UsereditprofileComponent implements OnInit {\n    profileUserForm: FormGroup;\n    loading = false;\n    submitted = false;\n    user: any;\n    mySubscription: any;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private userService: UserService,\n        private location: Location,\n        private route: ActivatedRoute\n    ) {\n        // code for refresh side menu..........\n        // this.router.routeReuseStrategy.shouldReuseRoute = function(){\n        //     return false;\n        //   };\n         \n    }\n\n    ngOnInit() {\n        this.profileUserForm = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            userName: ['', Validators.required],\n            email: ['', Validators.required],\n            gender: ['', Validators.required],\n            dob: ['', Validators.required],\n        });\n        this.initForm();\n        this.router.events.pipe(\n            filter((event: RouterEvent) => event instanceof NavigationEnd)\n          ).subscribe(() => {\n           \n          });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.profileUserForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.profileUserForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.userService.updateProfile(this.profileUserForm.value)\n            .then(\n                data => {\n                    if (data.role === RoleName.Admin) {\n                        this.router.navigateByUrl('/menu',{ skipLocationChange: false }).then(() => {\n                            this.router.navigate(['/admin']);\n                        });\n                    } else {\n                        this.router.navigateByUrl('/menu', { skipLocationChange: true }).then(() => {\n                            this.router.navigate(['/'])\n                        });\n                    }\n                },\n                error => {\n                    this.loading = false;\n                });\n    }\n\n    private initForm() {\n        let firstName = '';\n        let lastName = '';\n        let userName = '';\n        let email = '';\n        let gender = '';\n        let dob;\n        let id;\n        let role = '';\n\n        const user = this.userService.user;\n        id = user.id\n        firstName = user.firstName;\n        lastName = user.lastName;\n        userName = user.userName;\n        email = user.email;\n        gender = user.gender;\n        dob = user.dob;\n        role = user.role;\n\n        this.profileUserForm = new FormGroup({\n            'id': new FormControl(id),\n            'firstName': new FormControl(firstName, Validators.required),\n            'lastName': new FormControl(lastName, Validators.required),\n            'userName': new FormControl(userName, Validators.required),\n            'email': new FormControl(email, Validators.required),\n            'gender': new FormControl(gender, Validators.required),\n            'dob': new FormControl(dob, Validators.required),\n            'role': new FormControl(role)\n        });\n    }\n\n    deactivate(): void {\n       this.router = null;\n      }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VzZXJwYWdlL3VzZXJwYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<h1>Hi {{userDisplayName}}!</h1>\\n<p>You're logged in!!</p>\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\n@Component({\n  selector: 'app-userpage',\n  templateUrl: './userpage.component.html',\n  styleUrls: ['./userpage.component.css']\n})\nexport class UserpageComponent implements OnInit {\n  userDisplayName = '';\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.userDisplayName = this.userService.user.userName;\n  }\n\n}\n","module.exports = \".pull-right{\\r\\n    float: right !important;\\r\\n  }\\r\\n\\r\\n.pull-left{\\r\\n    float: left !important;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdXNlcnByb2ZpbGUvdXNlcnByb2ZpbGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHVCQUF1QjtFQUN6Qjs7QUFFRjtJQUNJLHNCQUFzQjtFQUN4QiIsImZpbGUiOiJzcmMvYXBwL3VzZXJwcm9maWxlL3VzZXJwcm9maWxlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucHVsbC1yaWdodHtcclxuICAgIGZsb2F0OiByaWdodCAhaW1wb3J0YW50O1xyXG4gIH1cclxuXHJcbi5wdWxsLWxlZnR7XHJcbiAgICBmbG9hdDogbGVmdCAhaW1wb3J0YW50O1xyXG4gIH0iXX0= */\"","module.exports = \"<div class=\\\"profile-page\\\">\\n\\n  <div class=\\\"user-info\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n\\n        <div class=\\\"col-xs-12 col-md-10 offset-md-1\\\">\\n            <a [routerLink]=\\\"['/editprofile']\\\"\\n            class=\\\"btn btn-sm btn-outline-secondary action-btn pull-right\\\">\\n            <i class=\\\"fa fa-edit\\\"></i> Edit Profile Settings\\n          </a>\\n          <img  class=\\\"user-img\\\" />\\n          <h4>User     : {{user.userName }}</h4>\\n          <p>First Name: {{user.firstName}}</p>\\n          <p>Last Name : {{user.lastName}}</p>\\n          <p>Email     : {{user.email}}</p>\\n           \\n        </div>\\n\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { User } from '../_models/user';\nimport { UserService } from '../_services/user.service';\nimport { Router, NavigationEnd } from '@angular/router';\n\n@Component({\n  selector: 'app-userprofile',\n  templateUrl: './userprofile.component.html',\n  styleUrls: ['./userprofile.component.css']\n})\nexport class UserprofileComponent implements OnInit {\n  user : User;\n\n  constructor(private userService : UserService,\n    private router: Router) { }\n\n  ngOnInit() {\n    if(this.userService.user != null){\n      this.user = this.userService.user;\n    }\n    this.router.events.subscribe((evt) => {\n      if (evt instanceof NavigationEnd) {\n          this.router = null;\n      }\n  });\n  }\n\n  get isUser() {\n          return this.user = this.userService.user;\n      }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}